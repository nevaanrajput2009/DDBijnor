@inject ILocalStorageService _localStorage
@inject ICartService _cartService
@implements IDisposable

<MudAppBar Elevation="1">
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Dark" Edge="Edge.Start" OnClick="@ToggleDrawer" />
    <MudSpacer />
    <div>
        <MudNavLink Href="/cart" Style="height: 61px;margin-top: -12%;">
            <MudBadge Content="count" Color="changeColor" Overlap="true" Class="mx-6 my-4">
                <MudIcon Icon="@Icons.Material.Filled.ShoppingBasket" Color="Color.Default" />
            </MudBadge>
        </MudNavLink>
    </div>
    <AuthorizeView>
        <Authorized>
            <MudText Typo="Typo.h6"> @context.User.Identity.Name</MudText>
        </Authorized>
    </AuthorizeView>

</MudAppBar>
<MudDrawer @bind-Open="@open" Elevation="1">
    <MudDrawerHeader>
        <MudText Typo="Typo.h6">Daily Delight</MudText>
    </MudDrawerHeader>
    <MudNavMenu>
      @*  <MudNavLink Href="/contact" Match="NavLinkMatch.All" Icon="@Icons.Filled.Home">Contact</MudNavLink>
*@
        <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Filled.Home">Home</MudNavLink>
        <MudNavLink Href="/orders" Match="NavLinkMatch.All" Icon="@Icons.Filled.ShoppingCart">Orders</MudNavLink>
        <br />
        <AuthorizeView>
            <Authorized>
                <MudNavLink Href="logout" Icon="@Icons.Filled.Logout">Logout</MudNavLink>
            </Authorized>
            <NotAuthorized>
                <MudNavLink Href="register" Icon="@Icons.Filled.AppRegistration">Register</MudNavLink>
                <MudNavLink Href="login" Icon="@Icons.Filled.Login">Login</MudNavLink>
            </NotAuthorized>
        </AuthorizeView>
    </MudNavMenu>
</MudDrawer>
@code {
    bool open = false;
    int count = 0;
    Color changeColor = Color.Primary;
    void ToggleDrawer()
    {
        open = !open;
    }
    protected override void OnInitialized()
    {
        _cartService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _cartService.OnChange -= StateHasChanged;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       count = await GetCartCount();
        StateHasChanged();
    }
    private async Task<int> GetCartCount()
    {
        var cart = await _localStorage.GetItemAsync<List<ShoppingCart>>(SD.ShoppingCart, CancellationToken.None);
        return cart == null ? 0 : cart.Count;
    }
}