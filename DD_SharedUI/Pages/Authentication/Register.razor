@page "/register"


<EditForm Model="SignUpRequest" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator />
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Sign Up</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (ShowRegistrationErrors)
                {
                    @foreach (var error in Errors)
                    {
                        <MudText Style="color:red;font-weight:bold;">@error</MudText>
                    }

                }
                <MudTextField Label="User Name" HelperText="Enter unique name without space" @bind-Value="SignUpRequest.Name" For="@(() => SignUpRequest.Name)" />
                <MudTextField Label="Phone Number" HelperText="Do not need 0 or +91" @bind-Value="SignUpRequest.PhoneNumber" For="@(() => SignUpRequest.PhoneNumber)" />
                <MudTextField Label="Password" HelperText="Choose a password" Class="mt-3" @bind-Value="SignUpRequest.Password" For="@(() => SignUpRequest.Password)" InputType="InputType.Password" />
                <MudTextField Label="Confirm Password" HelperText="Retype password" Class="mt-3" @bind-Value="SignUpRequest.ConfirmPassword" For="@(() => SignUpRequest.ConfirmPassword)" InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
                <MudLink Href="/login" Class="ml-auto">Already register please login</MudLink>
            </MudCardActions>

        </MudCard>
    </MudItem>
</EditForm>

@code{
    private SignUpRequestDTO SignUpRequest = new();
    public bool IsProcessing { get; set; } = false;
    public bool ShowRegistrationErrors { get; set; }
    public IEnumerable<string> Errors { get; set; }

    [Inject]
    public IAuthenticationService _authSerivce { get; set; }
    [Inject]
    public NavigationManager _navigationManager { get; set; }

    private async Task RegisterUser()
    {
        ShowRegistrationErrors = false;
        IsProcessing = true;
        var result = await _authSerivce.RegisterUser(SignUpRequest);
        if (result.IsRegisterationSuccessful)
        {
            //regiration is successful
            _navigationManager.NavigateTo("/");
        }
        else
        {
            //failure
            Errors = result.Errors;
            ShowRegistrationErrors = true;

        }
        IsProcessing = false;
    }
}

