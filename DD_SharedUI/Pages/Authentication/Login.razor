@page "/login"

<EditForm Model="SignInRequest" OnValidSubmit="LoginUser">
    <DataAnnotationsValidator />
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h2">Sign In</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (ShowSignInErrors)
                {
                    <MudText Style="color:red;font-weight:bold;">@Errors</MudText>
                }
                <MudTextField Label="User Name" HelperText="Enter your username" @bind-Value="SignInRequest.UserName" For="@(() => SignInRequest.UserName)" />
                <MudTextField Label="Password" HelperText="Enter your password" Class="mt-3"
                              @bind-Value="SignInRequest.Password" For="@(() => SignInRequest.Password)" InputType="InputType.Password" />
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Sign in</MudButton>
                <MudLink Href="/register" Class="ml-auto">Register as a new user</MudLink>
            </MudCardActions>

        </MudCard>
    </MudItem>
</EditForm>


@code {
    private SignInRequestDTO SignInRequest = new();
    public bool IsProcessing { get; set; } = false;
    public bool ShowSignInErrors { get; set; }
    public string Errors { get; set; }

    [Inject]
    public IAuthenticationService _authSerivce { get; set; }
    [Inject]
    public NavigationManager _navigationManager { get; set; }
    public string ReturnUrl { get; set; }
    private async Task LoginUser()
    {
        ShowSignInErrors = false;
        IsProcessing = true;
        var result = await _authSerivce.Login(SignInRequest);
        if (result.IsAuthSuccessful)
        {
            //regiration is successful
            var absoluteUri = new Uri(_navigationManager.Uri);
            var queryParam = System.Web.HttpUtility.ParseQueryString(absoluteUri.Query);
            ReturnUrl = queryParam["returnUrl"];
            if (string.IsNullOrEmpty(ReturnUrl))
            {
                _navigationManager.NavigateTo("/");
            }
            else
            {
                _navigationManager.NavigateTo("/" + ReturnUrl);
            }
        }
        else
        {
            //failure
            Errors = result.ErrorMessage;
            ShowSignInErrors = true;

        }
        IsProcessing = false;
    }
}
